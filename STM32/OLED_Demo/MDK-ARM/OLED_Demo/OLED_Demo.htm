<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [OLED_Demo\OLED_Demo.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image OLED_Demo\OLED_Demo.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Fri Sep 21 11:12:55 2018
<BR><P>
<H3>Maximum Stack Usage =        272 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; testtriangles() &rArr; OLED_GFX::Draw_Triangle(short, short, short, short, short, short) &rArr; OLED_GFX::Draw_Line(short, short, short, short) &rArr; OLED_GFX::Write_Line(short, short, short, short) &rArr; OLED_Driver::Draw_Pixel(short, short) &rArr; OLED_Driver::Set_Address(unsigned char, unsigned char) &rArr; OLED_Driver::Write_Command(unsigned char) &rArr; HAL_SPI_Transmit &rArr; [local to stm32f1xx_hal_spi_c]::SPI_CheckFlag_BSY(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, unsigned, unsigned, unsigned)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[20]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[8]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">BusFault_Handler</a><BR>
 <LI><a href="#[6]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">HardFault_Handler</a><BR>
 <LI><a href="#[7]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">MemManage_Handler</a><BR>
 <LI><a href="#[9]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">UsageFault_Handler</a><BR>
 <LI><a href="#[59]">_Error_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[59]">_Error_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[20]">ADC1_2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[8]">BusFault_Handler</a> from stm32f1xx_it.o(i.BusFault_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[23]">CAN1_RX1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[24]">CAN1_SCE_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[19]">DMA1_Channel1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel3_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1c]">DMA1_Channel4_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1d]">DMA1_Channel5_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1e]">DMA1_Channel6_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1f]">DMA1_Channel7_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[b]">DebugMon_Handler</a> from stm32f1xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[14]">EXTI0_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[36]">EXTI15_10_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[15]">EXTI1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[16]">EXTI2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[17]">EXTI3_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[18]">EXTI4_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[25]">EXTI9_5_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[12]">FLASH_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[6]">HardFault_Handler</a> from stm32f1xx_it.o(i.HardFault_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2e]">I2C1_ER_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2d]">I2C1_EV_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[30]">I2C2_ER_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2f]">I2C2_EV_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[7]">MemManage_Handler</a> from stm32f1xx_it.o(i.MemManage_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[5]">NMI_Handler</a> from stm32f1xx_it.o(i.NMI_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[f]">PVD_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[c]">PendSV_Handler</a> from stm32f1xx_it.o(i.PendSV_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[13]">RCC_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[37]">RTC_Alarm_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[11]">RTC_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[4]">Reset_Handler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[31]">SPI1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[32]">SPI2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[a]">SVC_Handler</a> from stm32f1xx_it.o(i.SVC_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[d]">SysTick_Handler</a> from stm32f1xx_it.o(i.SysTick_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[3a]">SystemInit</a> from system_stm32f1xx.o(i.SystemInit) referenced from startup_stm32f103xb.o(.text)
 <LI><a href="#[10]">TAMPER_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[26]">TIM1_BRK_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[29]">TIM1_CC_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[28]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[27]">TIM1_UP_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2a]">TIM2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2b]">TIM3_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2c]">TIM4_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[33]">USART1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[34]">USART2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[35]">USART3_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[38]">USBWakeUp_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[21]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[22]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[9]">UsageFault_Handler</a> from stm32f1xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[e]">WWDG_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[3b]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f103xb.o(.text)
 <LI><a href="#[3c]">__sti___6_main_c_oled</a> from main.o(i.__sti___6_main_c_oled) referenced from main.o(.init_array)
 <LI><a href="#[39]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[3b]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(.text)
</UL>
<P><STRONG><a name="[87]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[3e]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[41]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[88]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[40]"></a>_main_cpp_init$empty</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8a.o(.ARM.Collect$$$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = _main_cpp_init$empty &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[89]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[8a]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[8b]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[8c]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[4]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cpp_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_cpp_init$empty
</UL>

<P><STRONG><a name="[3f]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[8d]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[8]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f1xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Device_Init()
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testlines()
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testdrawcircles(unsigned short)
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testfastlines()
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testdrawrects()
</UL>

<P><STRONG><a name="[50]"></a>HAL_GPIO_Init</STRONG> (Thumb, 422 bytes, Stack size 40 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>

<P><STRONG><a name="[57]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Device_Init()
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Write_Data(unsigned char*, unsigned short)
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Write_Command(unsigned char)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Write_Data(unsigned char)
</UL>

<P><STRONG><a name="[43]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, unsigned, unsigned, unsigned)
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[5a]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f1xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[44]"></a>HAL_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f1xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[46]"></a>HAL_InitTick</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f1xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[47]"></a>HAL_MspInit</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, stm32f1xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[49]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f1xx_hal_cortex_c]::NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[45]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[4b]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 316 bytes, Stack size 32 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[71]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[4c]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[4d]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 740 bytes, Stack size 40 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[4e]"></a>HAL_SPI_Init</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, stm32f1xx_hal_spi_ex.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[4f]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, spi.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[51]"></a>HAL_SPI_Transmit</STRONG> (Thumb, 356 bytes, Stack size 40 bytes, stm32f1xx_hal_spi.o(i.HAL_SPI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_SPI_Transmit &rArr; [local to stm32f1xx_hal_spi_c]::SPI_CheckFlag_BSY(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, unsigned, unsigned, unsigned)
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f1xx_hal_spi_c]::SPI_CheckFlag_BSY(__SPI_HandleTypeDef*, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Write_Data(unsigned char*, unsigned short)
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Write_Command(unsigned char)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Write_Data(unsigned char)
</UL>

<P><STRONG><a name="[72]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_SYSTICK_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[55]"></a>HAL_SYSTICK_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_SYSTICK_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
</UL>

<P><STRONG><a name="[48]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f1xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f1xx_hal_cortex_c]::NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[54]"></a>HAL_SYSTICK_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f1xx_hal_cortex.o(i.HAL_SYSTICK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[6]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>MX_GPIO_Init</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[58]"></a>MX_SPI1_Init</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, spi.o(i.MX_SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MX_SPI1_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>SysTick_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32f1xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Handler &rArr; HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>SystemInit</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, system_stm32f1xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(.text)
</UL>
<P><STRONG><a name="[9]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>_Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i._Error_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>

<P><STRONG><a name="[5b]"></a>testdrawrects()</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, main.o(i._Z13testdrawrectsv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = testdrawrects() &rArr; OLED_GFX::Draw_Rect(short, short, short, short) &rArr; OLED_Driver::Draw_FastVLine(short, short, short) &rArr; OLED_Driver::Write_Data(unsigned char*, unsigned short) &rArr; HAL_SPI_Transmit &rArr; [local to stm32f1xx_hal_spi_c]::SPI_CheckFlag_BSY(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Draw_Rect(short, short, short, short)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Clear_Screen()
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5e]"></a>testfastlines()</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, main.o(i._Z13testfastlinesv))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = testfastlines() &rArr; OLED_Driver::Clear_Screen() &rArr; OLED_Driver::RAM_Address() &rArr; OLED_Driver::Write_Command(unsigned char) &rArr; HAL_SPI_Transmit &rArr; [local to stm32f1xx_hal_spi_c]::SPI_CheckFlag_BSY(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Set_Color(unsigned short)
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Draw_FastVLine(short, short, short)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Draw_FastHLine(short, short, short)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Clear_Screen()
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[62]"></a>testfillrects(unsigned short, unsigned short)</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, main.o(i._Z13testfillrectstt))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = testfillrects(unsigned short, unsigned short) &rArr; OLED_GFX::Draw_Rect(short, short, short, short) &rArr; OLED_Driver::Draw_FastVLine(short, short, short) &rArr; OLED_Driver::Write_Data(unsigned char*, unsigned short) &rArr; HAL_SPI_Transmit &rArr; [local to stm32f1xx_hal_spi_c]::SPI_CheckFlag_BSY(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Fill_Rect(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Draw_Rect(short, short, short, short)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Set_Color(unsigned short)
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Set_FillColor(unsigned short)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Clear_Screen()
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[65]"></a>testtriangles()</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, main.o(i._Z13testtrianglesv))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = testtriangles() &rArr; OLED_GFX::Draw_Triangle(short, short, short, short, short, short) &rArr; OLED_GFX::Draw_Line(short, short, short, short) &rArr; OLED_GFX::Write_Line(short, short, short, short) &rArr; OLED_Driver::Draw_Pixel(short, short) &rArr; OLED_Driver::Set_Address(unsigned char, unsigned char) &rArr; OLED_Driver::Write_Command(unsigned char) &rArr; HAL_SPI_Transmit &rArr; [local to stm32f1xx_hal_spi_c]::SPI_CheckFlag_BSY(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Draw_Triangle(short, short, short, short, short, short)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Set_Color(unsigned short)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Clear_Screen()
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[67]"></a>lcdTestPattern()</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, main.o(i._Z14lcdTestPatternv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lcdTestPattern() &rArr; OLED_Driver::Set_Coordinate(unsigned short, unsigned short) &rArr; OLED_Driver::Write_Command(unsigned char) &rArr; HAL_SPI_Transmit &rArr; [local to stm32f1xx_hal_spi_c]::SPI_CheckFlag_BSY(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Set_Color(unsigned short)
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Set_Coordinate(unsigned short, unsigned short)
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Write_Data(unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6a]"></a>testroundrects()</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, main.o(i._Z14testroundrectsv))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = testroundrects() &rArr; OLED_GFX::Draw_RoundRect(short, short, short, short, short) &rArr; OLED_GFX::DrawCircle_Helper(short, short, short, unsigned char) &rArr; OLED_Driver::Draw_Pixel(short, short) &rArr; OLED_Driver::Set_Address(unsigned char, unsigned char) &rArr; OLED_Driver::Write_Command(unsigned char) &rArr; HAL_SPI_Transmit &rArr; [local to stm32f1xx_hal_spi_c]::SPI_CheckFlag_BSY(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Draw_RoundRect(short, short, short, short, short)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Set_Color(unsigned short)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Clear_Screen()
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6c]"></a>testdrawcircles(unsigned short)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, main.o(i._Z15testdrawcirclest))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = testdrawcircles(unsigned short) &rArr; OLED_GFX::Draw_Circle(short, short, short) &rArr; OLED_Driver::Draw_Pixel(short, short) &rArr; OLED_Driver::Set_Address(unsigned char, unsigned char) &rArr; OLED_Driver::Write_Command(unsigned char) &rArr; HAL_SPI_Transmit &rArr; [local to stm32f1xx_hal_spi_c]::SPI_CheckFlag_BSY(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Draw_Circle(short, short, short)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Set_Color(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6e]"></a>testfillcircles(unsigned char, unsigned short)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(i._Z15testfillcirclesht))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = testfillcircles(unsigned char, unsigned short) &rArr; OLED_GFX::Fill_Circle(short, short, short) &rArr; OLED_GFX::FillCircle_Helper(short, short, short, unsigned char, short) &rArr; OLED_Driver::Draw_FastVLine(short, short, short) &rArr; OLED_Driver::Write_Data(unsigned char*, unsigned short) &rArr; HAL_SPI_Transmit &rArr; [local to stm32f1xx_hal_spi_c]::SPI_CheckFlag_BSY(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Fill_Circle(short, short, short)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Set_Color(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[70]"></a>SystemClock_Config()</STRONG> (Thumb, 104 bytes, Stack size 72 bytes, main.o(i._Z18SystemClock_Configv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SystemClock_Config() &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[73]"></a>testlines()</STRONG> (Thumb, 318 bytes, Stack size 16 bytes, main.o(i._Z9testlinesv))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = testlines() &rArr; OLED_GFX::Draw_Line(short, short, short, short) &rArr; OLED_GFX::Write_Line(short, short, short, short) &rArr; OLED_Driver::Draw_Pixel(short, short) &rArr; OLED_Driver::Set_Address(unsigned char, unsigned char) &rArr; OLED_Driver::Write_Command(unsigned char) &rArr; HAL_SPI_Transmit &rArr; [local to stm32f1xx_hal_spi_c]::SPI_CheckFlag_BSY(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Draw_Line(short, short, short, short)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Set_Color(unsigned short)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Clear_Screen()
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[75]"></a>OLED_Driver::Draw_Pixel(short, short)</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, oled_driver.o(i._ZN11OLED_Driver10Draw_PixelEss))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = OLED_Driver::Draw_Pixel(short, short) &rArr; OLED_Driver::Set_Address(unsigned char, unsigned char) &rArr; OLED_Driver::Write_Command(unsigned char) &rArr; HAL_SPI_Transmit &rArr; [local to stm32f1xx_hal_spi_c]::SPI_CheckFlag_BSY(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Write_Data(unsigned char*, unsigned short)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Set_Address(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Draw_Circle(short, short, short)
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::DrawCircle_Helper(short, short, short, unsigned char)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Write_Line(short, short, short, short)
</UL>

<P><STRONG><a name="[69]"></a>OLED_Driver::Write_Data(unsigned char*, unsigned short)</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, oled_driver.o(i._ZN11OLED_Driver10Write_DataEPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = OLED_Driver::Write_Data(unsigned char*, unsigned short) &rArr; HAL_SPI_Transmit &rArr; [local to stm32f1xx_hal_spi_c]::SPI_CheckFlag_BSY(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Fill_Rect(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Display_Interface()
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Draw_FastVLine(short, short, short)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Draw_FastHLine(short, short, short)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Clear_Screen()
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Display_bmp()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Draw_Pixel(short, short)
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdTestPattern()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Write_text(unsigned char)
</UL>

<P><STRONG><a name="[77]"></a>OLED_Driver::Write_Data(unsigned char)</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, oled_driver.o(i._ZN11OLED_Driver10Write_DataEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = OLED_Driver::Write_Data(unsigned char) &rArr; HAL_SPI_Transmit &rArr; [local to stm32f1xx_hal_spi_c]::SPI_CheckFlag_BSY(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Fill_Rect(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Set_Coordinate(unsigned short, unsigned short)
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Draw_FastVLine(short, short, short)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Draw_FastHLine(short, short, short)
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Device_Init()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Set_Address(unsigned char, unsigned char)
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::RAM_Address()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Write_text(unsigned char)
</UL>

<P><STRONG><a name="[78]"></a>OLED_Driver::Write_text(unsigned char)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, oled_driver.o(i._ZN11OLED_Driver10Write_textEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = OLED_Driver::Write_text(unsigned char) &rArr; OLED_Driver::Write_Data(unsigned char*, unsigned short) &rArr; HAL_SPI_Transmit &rArr; [local to stm32f1xx_hal_spi_c]::SPI_CheckFlag_BSY(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Write_Data(unsigned char*, unsigned short)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Write_Data(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Display_String_8x16(unsigned char, unsigned char, const unsigned char*)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Display_String_5x8(unsigned char, unsigned char, const unsigned char*)
</UL>

<P><STRONG><a name="[79]"></a>OLED_Driver::Device_Init()</STRONG> (Thumb, 452 bytes, Stack size 24 bytes, oled_driver.o(i._ZN11OLED_Driver11Device_InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = OLED_Driver::Device_Init() &rArr; OLED_Driver::Clear_Screen() &rArr; OLED_Driver::RAM_Address() &rArr; OLED_Driver::Write_Command(unsigned char) &rArr; HAL_SPI_Transmit &rArr; [local to stm32f1xx_hal_spi_c]::SPI_CheckFlag_BSY(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Clear_Screen()
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Write_Command(unsigned char)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Write_Data(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7b]"></a>OLED_Driver::Display_bmp()</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, oled_driver.o(i._ZN11OLED_Driver11Display_bmpEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = OLED_Driver::Display_bmp() &rArr; OLED_Driver::RAM_Address() &rArr; OLED_Driver::Write_Command(unsigned char) &rArr; HAL_SPI_Transmit &rArr; [local to stm32f1xx_hal_spi_c]::SPI_CheckFlag_BSY(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Write_Data(unsigned char*, unsigned short)
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Write_Command(unsigned char)
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::RAM_Address()
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7c]"></a>OLED_Driver::RAM_Address()</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, oled_driver.o(i._ZN11OLED_Driver11RAM_AddressEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = OLED_Driver::RAM_Address() &rArr; OLED_Driver::Write_Command(unsigned char) &rArr; HAL_SPI_Transmit &rArr; [local to stm32f1xx_hal_spi_c]::SPI_CheckFlag_BSY(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Write_Command(unsigned char)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Write_Data(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Display_Interface()
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Clear_Screen()
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Display_bmp()
</UL>

<P><STRONG><a name="[76]"></a>OLED_Driver::Set_Address(unsigned char, unsigned char)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, oled_driver.o(i._ZN11OLED_Driver11Set_AddressEhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = OLED_Driver::Set_Address(unsigned char, unsigned char) &rArr; OLED_Driver::Write_Command(unsigned char) &rArr; HAL_SPI_Transmit &rArr; [local to stm32f1xx_hal_spi_c]::SPI_CheckFlag_BSY(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Write_Command(unsigned char)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Write_Data(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Draw_Pixel(short, short)
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Display_String_8x16(unsigned char, unsigned char, const unsigned char*)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Display_String_5x8(unsigned char, unsigned char, const unsigned char*)
</UL>

<P><STRONG><a name="[5c]"></a>OLED_Driver::Clear_Screen()</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, oled_driver.o(i._ZN11OLED_Driver12Clear_ScreenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = OLED_Driver::Clear_Screen() &rArr; OLED_Driver::RAM_Address() &rArr; OLED_Driver::Write_Command(unsigned char) &rArr; HAL_SPI_Transmit &rArr; [local to stm32f1xx_hal_spi_c]::SPI_CheckFlag_BSY(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Write_Data(unsigned char*, unsigned short)
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Write_Command(unsigned char)
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::RAM_Address()
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Device_Init()
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testlines()
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testroundrects()
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testtriangles()
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testfillrects(unsigned short, unsigned short)
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testfastlines()
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testdrawrects()
</UL>

<P><STRONG><a name="[63]"></a>OLED_Driver::Set_FillColor(unsigned short)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, oled_driver.o(i._ZN11OLED_Driver13Set_FillColorEt))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testfillrects(unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[7a]"></a>OLED_Driver::Write_Command(unsigned char)</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, oled_driver.o(i._ZN11OLED_Driver13Write_CommandEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = OLED_Driver::Write_Command(unsigned char) &rArr; HAL_SPI_Transmit &rArr; [local to stm32f1xx_hal_spi_c]::SPI_CheckFlag_BSY(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Fill_Rect(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Display_Interface()
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Set_Coordinate(unsigned short, unsigned short)
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Draw_FastVLine(short, short, short)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Draw_FastHLine(short, short, short)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Clear_Screen()
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Display_bmp()
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Device_Init()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Set_Address(unsigned char, unsigned char)
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::RAM_Address()
</UL>

<P><STRONG><a name="[60]"></a>OLED_Driver::Draw_FastHLine(short, short, short)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, oled_driver.o(i._ZN11OLED_Driver14Draw_FastHLineEsss))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = OLED_Driver::Draw_FastHLine(short, short, short) &rArr; OLED_Driver::Write_Data(unsigned char*, unsigned short) &rArr; HAL_SPI_Transmit &rArr; [local to stm32f1xx_hal_spi_c]::SPI_CheckFlag_BSY(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Write_Data(unsigned char*, unsigned short)
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Write_Command(unsigned char)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Write_Data(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Draw_Rect(short, short, short, short)
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Draw_Line(short, short, short, short)
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Draw_RoundRect(short, short, short, short, short)
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testfastlines()
</UL>

<P><STRONG><a name="[61]"></a>OLED_Driver::Draw_FastVLine(short, short, short)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, oled_driver.o(i._ZN11OLED_Driver14Draw_FastVLineEsss))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = OLED_Driver::Draw_FastVLine(short, short, short) &rArr; OLED_Driver::Write_Data(unsigned char*, unsigned short) &rArr; HAL_SPI_Transmit &rArr; [local to stm32f1xx_hal_spi_c]::SPI_CheckFlag_BSY(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Write_Data(unsigned char*, unsigned short)
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Write_Command(unsigned char)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Write_Data(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Draw_Rect(short, short, short, short)
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Draw_Line(short, short, short, short)
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Draw_RoundRect(short, short, short, short, short)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Fill_Circle(short, short, short)
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testfastlines()
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::FillCircle_Helper(short, short, short, unsigned char, short)
</UL>

<P><STRONG><a name="[68]"></a>OLED_Driver::Set_Coordinate(unsigned short, unsigned short)</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, oled_driver.o(i._ZN11OLED_Driver14Set_CoordinateEtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = OLED_Driver::Set_Coordinate(unsigned short, unsigned short) &rArr; OLED_Driver::Write_Command(unsigned char) &rArr; HAL_SPI_Transmit &rArr; [local to stm32f1xx_hal_spi_c]::SPI_CheckFlag_BSY(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Write_Command(unsigned char)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Write_Data(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdTestPattern()
</UL>

<P><STRONG><a name="[7d]"></a>OLED_Driver::Display_Interface()</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, oled_driver.o(i._ZN11OLED_Driver17Display_InterfaceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = OLED_Driver::Display_Interface() &rArr; OLED_Driver::RAM_Address() &rArr; OLED_Driver::Write_Command(unsigned char) &rArr; HAL_SPI_Transmit &rArr; [local to stm32f1xx_hal_spi_c]::SPI_CheckFlag_BSY(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Set_Color(unsigned short)
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Write_Data(unsigned char*, unsigned short)
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Write_Command(unsigned char)
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::RAM_Address()
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5f]"></a>OLED_Driver::Set_Color(unsigned short)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, oled_driver.o(i._ZN11OLED_Driver9Set_ColorEt))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Display_Interface()
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testlines()
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testfillcircles(unsigned char, unsigned short)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testdrawcircles(unsigned short)
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testroundrects()
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdTestPattern()
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testtriangles()
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testfillrects(unsigned short, unsigned short)
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testfastlines()
</UL>

<P><STRONG><a name="[85]"></a>OLED_Driver::OLED_Driver()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, oled_driver.o(i._ZN11OLED_DriverC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::OLED_GFX()
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::OLED_GFX__sub_object()
</UL>

<P><STRONG><a name="[8e]"></a>OLED_Driver::OLED_Driver__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, oled_driver.o(i._ZN11OLED_DriverC1Ev), UNUSED)

<P><STRONG><a name="[7e]"></a>OLED_GFX::Write_Line(short, short, short, short)</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, oled_gfx.o(i._ZN8OLED_GFX10Write_LineEssss))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = OLED_GFX::Write_Line(short, short, short, short) &rArr; OLED_Driver::Draw_Pixel(short, short) &rArr; OLED_Driver::Set_Address(unsigned char, unsigned char) &rArr; OLED_Driver::Write_Command(unsigned char) &rArr; HAL_SPI_Transmit &rArr; [local to stm32f1xx_hal_spi_c]::SPI_CheckFlag_BSY(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Draw_Pixel(short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Draw_Line(short, short, short, short)
</UL>

<P><STRONG><a name="[6d]"></a>OLED_GFX::Draw_Circle(short, short, short)</STRONG> (Thumb, 332 bytes, Stack size 48 bytes, oled_gfx.o(i._ZN8OLED_GFX11Draw_CircleEsss))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = OLED_GFX::Draw_Circle(short, short, short) &rArr; OLED_Driver::Draw_Pixel(short, short) &rArr; OLED_Driver::Set_Address(unsigned char, unsigned char) &rArr; OLED_Driver::Write_Command(unsigned char) &rArr; HAL_SPI_Transmit &rArr; [local to stm32f1xx_hal_spi_c]::SPI_CheckFlag_BSY(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Draw_Pixel(short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testdrawcircles(unsigned short)
</UL>

<P><STRONG><a name="[6f]"></a>OLED_GFX::Fill_Circle(short, short, short)</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, oled_gfx.o(i._ZN8OLED_GFX11Fill_CircleEsss))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = OLED_GFX::Fill_Circle(short, short, short) &rArr; OLED_GFX::FillCircle_Helper(short, short, short, unsigned char, short) &rArr; OLED_Driver::Draw_FastVLine(short, short, short) &rArr; OLED_Driver::Write_Data(unsigned char*, unsigned short) &rArr; HAL_SPI_Transmit &rArr; [local to stm32f1xx_hal_spi_c]::SPI_CheckFlag_BSY(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Draw_FastVLine(short, short, short)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::FillCircle_Helper(short, short, short, unsigned char, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testfillcircles(unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[80]"></a>OLED_GFX::print_String(unsigned char, unsigned char, const unsigned char*, FONT_SIZE)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, oled_gfx.o(i._ZN8OLED_GFX12print_StringEhhPKh9FONT_SIZE))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = OLED_GFX::print_String(unsigned char, unsigned char, const unsigned char*, FONT_SIZE) &rArr; OLED_GFX::Display_String_8x16(unsigned char, unsigned char, const unsigned char*) &rArr; OLED_Driver::Set_Address(unsigned char, unsigned char) &rArr; OLED_Driver::Write_Command(unsigned char) &rArr; HAL_SPI_Transmit &rArr; [local to stm32f1xx_hal_spi_c]::SPI_CheckFlag_BSY(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Display_String_8x16(unsigned char, unsigned char, const unsigned char*)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Display_String_5x8(unsigned char, unsigned char, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[66]"></a>OLED_GFX::Draw_Triangle(short, short, short, short, short, short)</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, oled_gfx.o(i._ZN8OLED_GFX13Draw_TriangleEssssss))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = OLED_GFX::Draw_Triangle(short, short, short, short, short, short) &rArr; OLED_GFX::Draw_Line(short, short, short, short) &rArr; OLED_GFX::Write_Line(short, short, short, short) &rArr; OLED_Driver::Draw_Pixel(short, short) &rArr; OLED_Driver::Set_Address(unsigned char, unsigned char) &rArr; OLED_Driver::Write_Command(unsigned char) &rArr; HAL_SPI_Transmit &rArr; [local to stm32f1xx_hal_spi_c]::SPI_CheckFlag_BSY(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Draw_Line(short, short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testtriangles()
</UL>

<P><STRONG><a name="[6b]"></a>OLED_GFX::Draw_RoundRect(short, short, short, short, short)</STRONG> (Thumb, 214 bytes, Stack size 48 bytes, oled_gfx.o(i._ZN8OLED_GFX14Draw_RoundRectEsssss))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = OLED_GFX::Draw_RoundRect(short, short, short, short, short) &rArr; OLED_GFX::DrawCircle_Helper(short, short, short, unsigned char) &rArr; OLED_Driver::Draw_Pixel(short, short) &rArr; OLED_Driver::Set_Address(unsigned char, unsigned char) &rArr; OLED_Driver::Write_Command(unsigned char) &rArr; HAL_SPI_Transmit &rArr; [local to stm32f1xx_hal_spi_c]::SPI_CheckFlag_BSY(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Draw_FastVLine(short, short, short)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Draw_FastHLine(short, short, short)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::DrawCircle_Helper(short, short, short, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testroundrects()
</UL>

<P><STRONG><a name="[83]"></a>OLED_GFX::DrawCircle_Helper(short, short, short, unsigned char)</STRONG> (Thumb, 294 bytes, Stack size 40 bytes, oled_gfx.o(i._ZN8OLED_GFX17DrawCircle_HelperEsssh))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = OLED_GFX::DrawCircle_Helper(short, short, short, unsigned char) &rArr; OLED_Driver::Draw_Pixel(short, short) &rArr; OLED_Driver::Set_Address(unsigned char, unsigned char) &rArr; OLED_Driver::Write_Command(unsigned char) &rArr; HAL_SPI_Transmit &rArr; [local to stm32f1xx_hal_spi_c]::SPI_CheckFlag_BSY(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Draw_Pixel(short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Draw_RoundRect(short, short, short, short, short)
</UL>

<P><STRONG><a name="[7f]"></a>OLED_GFX::FillCircle_Helper(short, short, short, unsigned char, short)</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, oled_gfx.o(i._ZN8OLED_GFX17FillCircle_HelperEssshs))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = OLED_GFX::FillCircle_Helper(short, short, short, unsigned char, short) &rArr; OLED_Driver::Draw_FastVLine(short, short, short) &rArr; OLED_Driver::Write_Data(unsigned char*, unsigned short) &rArr; HAL_SPI_Transmit &rArr; [local to stm32f1xx_hal_spi_c]::SPI_CheckFlag_BSY(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Draw_FastVLine(short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Fill_Circle(short, short, short)
</UL>

<P><STRONG><a name="[82]"></a>OLED_GFX::Display_String_5x8(unsigned char, unsigned char, const unsigned char*)</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, oled_gfx.o(i._ZN8OLED_GFX18Display_String_5x8EhhPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = OLED_GFX::Display_String_5x8(unsigned char, unsigned char, const unsigned char*) &rArr; OLED_Driver::Set_Address(unsigned char, unsigned char) &rArr; OLED_Driver::Write_Command(unsigned char) &rArr; HAL_SPI_Transmit &rArr; [local to stm32f1xx_hal_spi_c]::SPI_CheckFlag_BSY(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Set_Address(unsigned char, unsigned char)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Write_text(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::print_String(unsigned char, unsigned char, const unsigned char*, FONT_SIZE)
</UL>

<P><STRONG><a name="[81]"></a>OLED_GFX::Display_String_8x16(unsigned char, unsigned char, const unsigned char*)</STRONG> (Thumb, 130 bytes, Stack size 56 bytes, oled_gfx.o(i._ZN8OLED_GFX19Display_String_8x16EhhPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = OLED_GFX::Display_String_8x16(unsigned char, unsigned char, const unsigned char*) &rArr; OLED_Driver::Set_Address(unsigned char, unsigned char) &rArr; OLED_Driver::Write_Command(unsigned char) &rArr; HAL_SPI_Transmit &rArr; [local to stm32f1xx_hal_spi_c]::SPI_CheckFlag_BSY(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Set_Address(unsigned char, unsigned char)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Write_text(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::print_String(unsigned char, unsigned char, const unsigned char*, FONT_SIZE)
</UL>

<P><STRONG><a name="[74]"></a>OLED_GFX::Draw_Line(short, short, short, short)</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, oled_gfx.o(i._ZN8OLED_GFX9Draw_LineEssss))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = OLED_GFX::Draw_Line(short, short, short, short) &rArr; OLED_GFX::Write_Line(short, short, short, short) &rArr; OLED_Driver::Draw_Pixel(short, short) &rArr; OLED_Driver::Set_Address(unsigned char, unsigned char) &rArr; OLED_Driver::Write_Command(unsigned char) &rArr; HAL_SPI_Transmit &rArr; [local to stm32f1xx_hal_spi_c]::SPI_CheckFlag_BSY(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Draw_FastVLine(short, short, short)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Draw_FastHLine(short, short, short)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Write_Line(short, short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Draw_Triangle(short, short, short, short, short, short)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testlines()
</UL>

<P><STRONG><a name="[5d]"></a>OLED_GFX::Draw_Rect(short, short, short, short)</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, oled_gfx.o(i._ZN8OLED_GFX9Draw_RectEssss))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = OLED_GFX::Draw_Rect(short, short, short, short) &rArr; OLED_Driver::Draw_FastVLine(short, short, short) &rArr; OLED_Driver::Write_Data(unsigned char*, unsigned short) &rArr; HAL_SPI_Transmit &rArr; [local to stm32f1xx_hal_spi_c]::SPI_CheckFlag_BSY(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Draw_FastVLine(short, short, short)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Draw_FastHLine(short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testfillrects(unsigned short, unsigned short)
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testdrawrects()
</UL>

<P><STRONG><a name="[64]"></a>OLED_GFX::Fill_Rect(unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, oled_gfx.o(i._ZN8OLED_GFX9Fill_RectEtttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = OLED_GFX::Fill_Rect(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; OLED_Driver::Write_Data(unsigned char*, unsigned short) &rArr; HAL_SPI_Transmit &rArr; [local to stm32f1xx_hal_spi_c]::SPI_CheckFlag_BSY(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Write_Data(unsigned char*, unsigned short)
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Write_Command(unsigned char)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Write_Data(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testfillrects(unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[84]"></a>OLED_GFX::OLED_GFX()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, oled_gfx.o(i._ZN8OLED_GFXC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OLED_GFX::OLED_GFX() &rArr; OLED_GFX::OLED_GFX__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::OLED_GFX__sub_object()
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::OLED_Driver()
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___6_main_c_oled
</UL>

<P><STRONG><a name="[86]"></a>OLED_GFX::OLED_GFX__sub_object()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, oled_gfx.o(i._ZN8OLED_GFXC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OLED_GFX::OLED_GFX__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::OLED_Driver()
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::OLED_GFX()
</UL>

<P><STRONG><a name="[8f]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[90]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[91]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[39]"></a>main</STRONG> (Thumb, 256 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = main &rArr; testtriangles() &rArr; OLED_GFX::Draw_Triangle(short, short, short, short, short, short) &rArr; OLED_GFX::Draw_Line(short, short, short, short) &rArr; OLED_GFX::Write_Line(short, short, short, short) &rArr; OLED_Driver::Draw_Pixel(short, short) &rArr; OLED_Driver::Set_Address(unsigned char, unsigned char) &rArr; OLED_Driver::Write_Command(unsigned char) &rArr; HAL_SPI_Transmit &rArr; [local to stm32f1xx_hal_spi_c]::SPI_CheckFlag_BSY(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::print_String(unsigned char, unsigned char, const unsigned char*, FONT_SIZE)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Set_Color(unsigned short)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Display_Interface()
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Clear_Screen()
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Display_bmp()
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Device_Init()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Draw_Pixel(short, short)
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testlines()
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testfillcircles(unsigned char, unsigned short)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testdrawcircles(unsigned short)
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testroundrects()
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdTestPattern()
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testtriangles()
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testfillrects(unsigned short, unsigned short)
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testfastlines()
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testdrawrects()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[4a]"></a>[local to stm32f1xx_hal_cortex_c]::NVIC_SetPriority(IRQn_Type, unsigned)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i._ZN44_INTERNAL_22_stm32f1xx_hal_cortex_c_2992dbc016NVIC_SetPriorityE9IRQn_Typej))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[53]"></a>[local to stm32f1xx_hal_spi_c]::SPI_CheckFlag_BSY(__SPI_HandleTypeDef*, unsigned, unsigned)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f1xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f1xx_hal_spi_c_5e7b22bd17SPI_CheckFlag_BSYEP19__SPI_HandleTypeDefjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = [local to stm32f1xx_hal_spi_c]::SPI_CheckFlag_BSY(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>

<P><STRONG><a name="[52]"></a>[local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, unsigned, unsigned, unsigned)</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, stm32f1xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f1xx_hal_spi_c_5e7b22bd29SPI_WaitFlagStateUntilTimeoutEP19__SPI_HandleTypeDefjjjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f1xx_hal_spi_c]::SPI_CheckFlag_BSY(__SPI_HandleTypeDef*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[3c]"></a>__sti___6_main_c_oled</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i.__sti___6_main_c_oled))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __sti___6_main_c_oled &rArr; OLED_GFX::OLED_GFX() &rArr; OLED_GFX::OLED_GFX__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::OLED_GFX()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.init_array)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
